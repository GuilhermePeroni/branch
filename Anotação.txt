Primeiro passo ao usar o Git pela primeira vez: 

Git Config --global user.email "seu-email"
Git Config --global user.name "seu-nome"

Iniciando repositório na maquina e subindo para o git hub:

git init                                                   >   Inicia o repositório;
git add .                                                >   Adiciona os arquivos ao repositório;
git commit -a -m "mensagem"            >   Envia uma mensagem sobre a alteração;
git branch -M main                              >   Cria uma ramificação principal onde será armazenado os arquivos;
git remote add origin "https do git"    >   Vincula ao acesso remoto;
git push -u origin main                        >   Sobe os arquivos para o a área remota.

git log = usado para ver os commits feitos por quem e quando.

Up e Down ao servidor remoto:

git push para enviar;
git pull para receber.

remover, realocar e renomear arquivos:

git rm "nome do arquivo e sua extensão" rm= remove;

git mv "nome do arquivo" -> "pasta desejada" mv= move;

git  mv "pasta/arquivo" -> "pasta/nome_do_arquivo_renomeado" .

ignorar arquivos que são gerados automaticamente ou arquivos sensíveis:

criar uma pasta .gitignore onde nela adicionar as pastar/arquivos que irão ser ignorados.
apenas os arquivos adicionados após a pasta irão ser ignorados, para que os existentes funcionem 
terá que apagar e restaurar pelo oque eu entendi até o momento.


ESTUDAR NOVAMENTE AULA 31 DESFAZENDO ALTERAÇÕES E 33 GIT RESET

para resetar algo que já não faz mais sentido para o projeto:

git reset --hard = com está flag você força o sistema a resetar o repositório.

Criando Branchs:

git branch = mostra todas as ramificações e em qual você está;

git branch "arquivo" = cria uma nova ramificação.

Deletando Branch (ramificação):

não é comum deletar um branch, normalmente é guardado como histórico de trabalho, salvo 
quando criado errado;

comando git branch -d (nome do arquivo) ou git branch --delete (nome do arquivo).

Mudando de Branch:

1. Mudar de branch com o comando git checkout <nome da branch>;

2. Criar e mudar para uma nova branch com comando git checkout -b <nome da branch>;

3. Muda-se de branch para não "sujar" a branch master;

4. Desenvolve em outro branch e depois unir as modificações com a master;

5. Mudar de branch, pode levar alterações que não foram comitadas junto. Tome cuidado;

6. Se alterar arquivos -> não comitar -> mudar de branch:

    6.1. Os arquivos não comitados irão para branch nova e na antiga serão apagados;

7. Ficar de olho no git status quando for mudar de branch;

8. Porque criar branches?

    8.1. Não queremos mesclar o código com a main;

    8.2. Queremos validar primeiro, antes de levar atualizações para a branch de origem;

9. Sempre comitar antes de mudar de branch;

10. Lembrando:

    10.1. Criar uma nova branch com base na branch atual com o comando:

    10.2. git checkout -b <nome da branch>

11. Boas práticas:

    11.1. Comitar tudo;

    11.2. Sair do branch atual;

    11.3. Voltar para a master/origem;

    11.4. Fazer um git pull;

    11.5. Usar o git checkout -b <nome da nova branch> ------> Cópia da Master.

    Unindo Branch:

    1. Unir branches com o comando git merge <nome da branch>;

2. É por meio de "merges" que recebemos atualizações de outros devs;

3. O branch atual se une com o branch escolhido;

4. O Tech Lead usa esse recurso para atualizar a master;

5. Se não sou responsável pelo projeto, devo:

    5.1. Atualizar o meu branch com a master (Versão atual do projeto);

    5.2. Usa-se o comando git merge master;

6. Nunca dá um merge na branch master com outro branch;

7. Dificilmente vamos atualizar o nosso repositório usando a master;

8. Tomar cuidado! Não atualizar a master diretamente com um git push;

Utilizando stash (esconderijo)

1. Recomeço um trabalho utilizando o comado git stash;

2. A situação é a seguinte:

    2.1. Quando desenvolvo uma solução e está no caminho errado;

    2.2. Não desejo apagar tudo de novo e quero recomeçar;

    2.3. Usar o comando git stash;

    2.4. O código será jogado numa lixeira que poderá ser recuperado depois;

3. O comando git stash desfaz o trabalho "errado" e coloca no stash do git.

Recuperando stash:

1. O comando git stash salva uma stash;

2. Verifico outras abordagens de código com o comando git stash list;

3. Recupero abordagens com o comando git stash apply <id>

    3.1. Esse <id> é o número da lista lá do comando git stash list

4. Com esses comandos podemos continuar de onde o projeto parou;

5. O comando permite escolher a melhor abordagem de código;

6. O comando git stash show -p <id>, permite:

    6.1. Verificar o que foi modificado no código;

Removendo stash: 

1. Para remover todas as stash usa o comando git stash clear;

2. Para remover uma stash específica usa o comando git stash drop <id>

    2.1. Esse <id> você verifica com o comando git stash list

3. Tomar cuidado para não perder código;

4. Usar esse comando com muita certeza do que faz;

5. Ver a melhor abordagem:

    5.1. É melhor criar uma branch para o código em desenvolvimento?

    5.2. É melhor colocar numa stash?

    5.3. Vai deletar a branch e criar outra com o mesmo nome?

6. Em fim... Analise com calma!

Criando Tags;

1. para criar tags usamos git tag -a <Nome> -m <msg>;
2. a tag serve como um checkpoint de um branch;
3. usada para marcar estágios de um desenvolvimento;
4. é interessante commitar apos criar uma tag;
5. git tag para ver as tags criadas.

Alterando tags:

1. Verifica tags com o comando git show <nome>;
2. Trocamos de tags com o comando git checkout <nome>;
    2.1. Permite retroceder e avançar em checkpoints de um branch;
3. É mais interessante que as stash para ficar avançando e retrocedendo pontos do código;
4. São bem úteis no dia a dia.

Encontrando Branches:

1. Branches são criados a todo tempo;

2. Para ter acesso a branches no repositório remoto usamos:
    2.1. git fetch -a
    2.2. Esse comando atualiza todos o branches e tags ainda não reconhecido por você;

3. Útil para utilizar o branch de outro dev do time;

4. Fluxo Resumido:

    4.1. Outro Dev cria um branch e envia para o repositório;
    4.2. Eu faço um git fetch -a para ver as branches criadas no repositório;
    4.3. Eu acesso as branches e faço as alterações necessárias;
    4.4. Faço um git push e comunico o meu colega;
    4.5. Meu colega acessa o repositório e faz um git pull para ver as atualizações que fiz;

5. Lembrar que ao criar uma branch devemos:
    5.1. Ficar atento as alterações com git status;
    5.2. Fazer o commit das alterações
    5.3. Enviar para o repositório com git push após tudo está "ok".

Criando submodules:

1. Ter dois ou mais projetos em um só repositório;
2. Podemos adicionar dependências do projeto atual mantendo as estruturas separadas;
3. Comando para adicionar submodules no repositório:
    3.1. git submodules add <repo>
4. Comando para verificar se há submodules:
    4.1. git submudules
5. Fluxo de Entendimento:
    5.1. Imagine você fazer vários cursos na Udemy;
    5.2. Você cria um repositório para estudar os cursos da Udemy;
    5.3. Então, você pode criar submodules específicos para cada curso;
    5.4. Mas, tudo ficará num repositório só, que poderia ser chamado de udemy;
git s
    